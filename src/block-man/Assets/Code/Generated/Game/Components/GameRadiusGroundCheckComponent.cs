//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRadiusGroundCheck;

    public static Entitas.IMatcher<GameEntity> RadiusGroundCheck {
        get {
            if (_matcherRadiusGroundCheck == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RadiusGroundCheck);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRadiusGroundCheck = matcher;
            }

            return _matcherRadiusGroundCheck;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.TargetCollection.RadiusGroundCheck radiusGroundCheck { get { return (Code.Gameplay.Features.TargetCollection.RadiusGroundCheck)GetComponent(GameComponentsLookup.RadiusGroundCheck); } }
    public float RadiusGroundCheck { get { return radiusGroundCheck.Value; } }
    public bool hasRadiusGroundCheck { get { return HasComponent(GameComponentsLookup.RadiusGroundCheck); } }

    public GameEntity AddRadiusGroundCheck(float newValue) {
        var index = GameComponentsLookup.RadiusGroundCheck;
        var component = (Code.Gameplay.Features.TargetCollection.RadiusGroundCheck)CreateComponent(index, typeof(Code.Gameplay.Features.TargetCollection.RadiusGroundCheck));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceRadiusGroundCheck(float newValue) {
        var index = GameComponentsLookup.RadiusGroundCheck;
        var component = (Code.Gameplay.Features.TargetCollection.RadiusGroundCheck)CreateComponent(index, typeof(Code.Gameplay.Features.TargetCollection.RadiusGroundCheck));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveRadiusGroundCheck() {
        RemoveComponent(GameComponentsLookup.RadiusGroundCheck);
        return this;
    }
}
